import logging
from datetime import datetime
from os import path
import json

import numpy as np
import rethinkdb as rdb
import pytz

from .abstract_hook import AbstractHook
from ..nets.abstract_net import AbstractNet
from ..datasets.abstract_dataset import AbstractDataset


class RethinkDBHook(AbstractHook):
    """
    Stores the training configuration and progress to RethinkDB.

    The config is stored in `setups` database as raw JSON. Each epoch is stored in `training` database as raw JSON
    with "foreign" index to `setups` document."""

    def __init__(self, net: AbstractNet, config: dict, credentials_file: str, output_dir: str, **kwargs):
        """
        Save training config to database `setups`. Save the unique id generated by the database.
        :param net: trained network
        :param config: the whole configuration file
        :param credentials_file: path to JSON credentials file which contains fields: host, port, user, password, db.
                                 This file should not be included in git.
        """

        super().__init__(net=net, config=config, **kwargs)
        with open(credentials_file, 'r') as file:
            self._credentials = json.load(file)

        logging.debug('Creating setup in the db')
        with rdb.connect(**self._credentials) as conn:
            response = rdb.table('setups').insert({**config,
                                                   **{'timestamp': rdb.expr(datetime.now(pytz.utc))}, }).run(conn)
            if response['errors'] > 0:
                logging.error('Error: %s', response['errors'])
                return
            if response['inserted'] != 1:
                logging.error('Inserted unexpected number of documents: %s', response['inserted'])
                return
            self._rethink_id = response['generated_keys'][0]
            logging.debug('Created setup: %s', self._rethink_id)

        with open(path.join(output_dir, 'rethink_key.json'), 'w') as file:
            json.dump({'rethink_id': self._rethink_id}, file)

    def before_first_epoch(self, valid_results: AbstractDataset.Batch, test_results: AbstractDataset.Batch=None,
                           **kwargs) -> None:
        logging.debug('Rethink: before first epoch')

        with rdb.connect(**self._credentials) as conn:

            item = {'timestamp': rdb.expr(datetime.now(pytz.utc)),
                    'setup_id': self._rethink_id,
                    'epoch_id': 0,
                    **{'valid_{}'.format(key): (value.tolist() if isinstance(value, np.ndarray) else value)
                       for key, value in valid_results.items()},
                    **{'test_{}'.format(key): (value.tolist() if isinstance(value, np.ndarray) else value)
                       for key, value in test_results.items()}}

            response = rdb.table('training').insert(item).run(conn)
            if response['errors'] > 0:
                logging.error('Error: %s', response['errors'])
                return
            if response['inserted'] != 1:
                logging.error('Inserted unexpected number of documents: %s', response['inserted'])
                return
            progress_rethink_id = response['generated_keys'][0]
            logging.debug('Created train. progress: %s', progress_rethink_id)

    def after_epoch(self, epoch_id: int, train_results: AbstractDataset.Batch, valid_results: AbstractDataset.Batch,
                    test_results: AbstractDataset.Batch=None, **kwargs) -> None:
        logging.info('Rethink: after epoch %d', epoch_id)

        with rdb.connect(**self._credentials) as conn:
            item = {'timestamp': rdb.expr(datetime.now(pytz.utc)),
                    'setup_id': self._rethink_id,
                    'epoch_id': epoch_id,
                    ** {'train_{}'.format(key): (value.tolist() if isinstance(value, np.ndarray) else value)
                        for key, value in train_results.items()},
                    **{'valid_{}'.format(key): (value.tolist() if isinstance(value, np.ndarray) else value)
                       for key, value in valid_results.items()},
                    **{'test_{}'.format(key): (value.tolist() if isinstance(value, np.ndarray) else value)
                       for key, value in test_results.items()}}

            response = rdb.table('training')\
                        .insert(item)\
                        .run(conn)
            if response['errors'] > 0:
                logging.error('Error: %s', response['errors'])
                return
            if response['inserted'] != 1:
                logging.error('Inserted unexpected number of documents: %s', response['inserted'])
                return
            progress_rethink_id = response['generated_keys'][0]
            logging.debug('Created train. progress: %s', progress_rethink_id)
