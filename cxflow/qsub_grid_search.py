from slugify import slugify

import argparse
import ast
import itertools
import os
from os.path import expanduser, join


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('script', help='script to be grid-searched')
    parser.add_argument('--qsub-args', help='')
    parser.add_argument('--dry-run', action='store_true', help='print desired jobs instead of qsub')
    known, unknown = parser.parse_known_args()

    param_space = {}
    for name, options_string in zip(unknown[::2], unknown[1::2]):
        options = ast.literal_eval(options_string)
        assert isinstance(options, list), options
        param_space[name] = options

    param_names = param_space.keys()
    commands = []
    for values in itertools.product(*[param_space[name] for name in param_names]):
        command = str(known.script) + ' '
        for name, value in zip(param_names, values):
            command += str(name) + '=' + str(value) + ' '
        commands.append(command[:-1])

    with open('qsub_script_template.sh', 'r') as f:
        text = f.read()

    os.chdir(expanduser('~'))
    output_dir = 'qsubed'
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    for command in commands:
        slugified_command = slugify(command)
        new_text = text + '\n#####\n# Autogenerated by qsub_grid_search.py\n' + command + ' command="' +\
                   slugified_command + '"\n#####\n'
        file_name = 'qsub_' + slugified_command + '.sh'
        with open(join(output_dir, file_name), 'w') as f:
            f.write(new_text)

        to_be_exectued = 'qsub {} {}'.format(known.qsub_args, join(output_dir, file_name))
        if known.dry_run:
            print(to_be_exectued)
        else:
            os.system(to_be_exectued)
